[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://ntrwv4gdtylh"]

[sub_resource type="Shader" id="Shader_qrfks"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec3 snake_head;
uniform vec3 snake_front_body;
uniform vec3 snake_back_body;
uniform vec3 snake_tail;
uniform float test;

float inverseLerp(float v, float min_value, float max_value)
{
    return (v - min_value) / (max_value - min_value);
}

float remap(float v, float in_min, float in_max, float out_min, float out_max)
{
    float t = inverseLerp(v, in_min, in_max);
    return mix(out_min, out_max, t);
}

vec3 bezier(vec3 P0, vec3 P1, vec3 P2, vec3 P3, float t) {
    return (1.0 - t) * (1.0 - t) * (1.0 - t) * P0 +
        3.0 * (1.0 - t) * (1.0 - t) * t * P1 +
        3.0 * (1.0 - t) * t * t * P2 +
        t * t * t * P3;
}

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	
	if (VERTEX.z > 0.06)
	{
		vec3 curvePos = bezier(snake_head, snake_front_body, snake_back_body, snake_tail, VERTEX.z);
		vec3 vertex_world = (inverse(MODEL_MATRIX) * vec4(curvePos, 1.0)).xyz;
		
		VERTEX += vertex_world;
		//VERTEX.x += sin(TIME + VERTEX.z * 20.0) * 0.05 * (1.0 - VERTEX.z);
	}
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"

[resource]
resource_name = "MAT_SnakeBase"
render_priority = 0
shader = SubResource("Shader_qrfks")
shader_parameter/albedo = Color(0.725005, 0, 0.807035, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.112676
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/snake_head = null
shader_parameter/snake_front_body = null
shader_parameter/snake_back_body = null
shader_parameter/snake_tail = null
shader_parameter/test = 0.0
